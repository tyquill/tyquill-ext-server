# CodeRabbit Configuration for Tyquill Backend (NestJS)
# 백엔드 NestJS 프로젝트를 위한 CodeRabbit 설정

# 기본 언어 설정
language: "ko-KR"  # 한국어로 리뷰 진행

# 리뷰 톤 설정 
tone_instructions: "친근하고 건설적인 톤으로 리뷰해주세요. 코드 품질 향상에 도움이 되는 구체적인 제안을 해주세요."

# 리뷰 설정
reviews:
  profile: "assertive"  # 더 꼼꼼한 피드백
  high_level_summary: true
  high_level_summary_in_walkthrough: true
  assess_linked_issues: true  # Linear 이슈 연결 평가
  related_issues: true
  suggested_labels: true
  auto_apply_labels: false
  suggested_reviewers: true
  auto_assign_reviewers: false
  poem: false  # 시는 제거

  # NestJS 프로젝트에 맞는 라벨링 규칙
  labeling_instructions:
    - label: "backend"
      instructions: "NestJS 백엔드 관련 변경사항에 적용"
    - label: "api"
      instructions: "REST API 컨트롤러 추가/수정 시 적용"
    - label: "entity"
      instructions: "MikroORM Entity 클래스 변경 시 적용"
    - label: "service"
      instructions: "Service 계층 비즈니스 로직 변경 시 적용"
    - label: "module"
      instructions: "NestJS Module 구조 변경 시 적용"
    - label: "dto"
      instructions: "DTO 클래스 추가/수정 시 적용"
    - label: "database"
      instructions: "데이터베이스 관련 변경사항에 적용"
    - label: "test"
      instructions: "테스트 코드 추가/수정 시 적용"
    - label: "security"
      instructions: "보안 관련 변경사항에 적용"
    - label: "performance"
      instructions: "성능 최적화 관련 변경사항에 적용"

  # 파일별 리뷰 가이드라인
  path_instructions:
    - path: "src/api/**/*.controller.ts"
      instructions: |
        REST API Controller 리뷰 시:
        - RESTful 설계 원칙 준수 확인
        - 적절한 HTTP 메소드와 상태 코드 사용
        - DTO 검증 로직 확인 (class-validator)
        - 예외 처리 적절성 평가
        - NestJS 데코레이터 사용법 확인
        - API 문서화 완성도 확인 (Swagger)
    
    - path: "src/**/*.service.ts"
      instructions: |
        Service 계층 리뷰 시:
        - 비즈니스 로직의 적절성 평가
        - 의존성 주입 패턴 확인 (@Injectable)
        - 예외 처리 및 로깅 적절성
        - 트랜잭션 처리 확인 (MikroORM)
        - 테스트 가능한 구조인지 평가
        - 단일 책임 원칙 준수 확인
    
    - path: "src/**/*.module.ts"
      instructions: |
        Module 파일 리뷰 시:
        - imports/exports 적절성 확인
        - 순환 의존성 방지 확인
        - 모듈 구조의 논리적 일관성 평가
        - 전역 모듈 사용의 적절성 확인
    
    - path: "src/**/entities/*.entity.ts"
      instructions: |
        Entity 클래스 리뷰 시:
        - MikroORM 데코레이터 적절성 확인
        - 연관관계 매핑 정확성 평가 (@OneToMany, @ManyToOne)
        - 데이터베이스 제약조건 확인
        - 순환 참조 해결 방법 확인
        - 타입 안전성 확인
    
    - path: "src/**/dto/*.dto.ts"
      instructions: |
        DTO 클래스 리뷰 시:
        - class-validator 데코레이터 적절성 확인
        - 타입 정의 정확성 평가
        - 검증 규칙의 적절성 확인
        - 선택적 필드 처리 확인
        - 변환 로직 적절성 평가
    
    - path: "src/mikro-orm.config.ts"
      instructions: |
        MikroORM 설정 파일 리뷰 시:
        - 데이터베이스 연결 설정 확인
        - Entity 발견 패턴 적절성 평가
        - 환경별 설정 분리 확인
        - 보안 설정 적절성 확인
    
    - path: "test/**/*.spec.ts"
      instructions: |
        테스트 코드 리뷰 시:
        - Jest 테스트 패턴 적절성 확인
        - describe/it 구조 논리성 평가
        - Mock 객체 사용의 적절성 평가
        - 테스트 데이터 격리 확인
        - beforeEach/afterEach 적절성 확인
        - 비동기 테스트 처리 확인
    
    - path: "src/**/*.guard.ts"
      instructions: |
        Guard 파일 리뷰 시:
        - 인증/인가 로직 적절성 확인
        - 보안 취약점 검토
        - 에러 처리 적절성 평가
        - 성능 최적화 확인
    
    - path: "src/**/*.interceptor.ts"
      instructions: |
        Interceptor 파일 리뷰 시:
        - 요청/응답 처리 로직 적절성 확인
        - 성능 영향 평가
        - 로깅 및 모니터링 적절성 확인
        - 에러 핸들링 적절성 평가

  # 자동 리뷰 설정
  auto_review:
    enabled: true
    auto_incremental_review: true
    drafts: false
    base_branches: ["main", "develop"]

  # TypeScript/NestJS 관련 도구 활성화
  tools:
    eslint:
      enabled: true
      config_file: "eslint.config.mjs"
    
    github-checks:
      enabled: true
      timeout_ms: 120000  # 2분

# 채팅 설정
chat:
  auto_reply: true
  integrations:
    linear:
      usage: "enabled"  # Linear 연동 활성화

# 지식 베이스 설정
knowledge_base:
  opt_out: false
  
  # Linear 연동 설정
  linear:
    usage: "enabled"
    team_keys: ["CHI"]  # tyquill 팀의 Linear 팀 키
  
  # 코드 가이드라인 활성화
  code_guidelines:
    enabled: true
    filePatterns:
      - "**/.cursorrules"
      - "**/CODING_STANDARDS.md"
      - "**/ARCHITECTURE.md"
      - "**/NESTJS_GUIDELINES.md"
  
  # 학습 범위 설정
  learnings:
    scope: "auto"
  
  # 이슈 연동
  issues:
    scope: "auto"
  
  # PR 연동
  pull_requests:
    scope: "auto"

# 코드 생성 설정
code_generation:
  docstrings:
    language: "ko-KR"
    path_instructions:
      - path: "src/**/*.ts"
        instructions: |
          TypeScript 클래스에 대한 JSDoc 생성 시:
          - 클래스의 목적과 책임을 명확히 설명
          - 주요 메소드의 파라미터와 리턴값 설명
          - 예외 상황에 대한 설명 포함
          - 사용 예시 제공 (필요시)
          - 한국어로 작성하되 기술 용어는 영어 병기
          - @param, @returns, @throws 태그 적절히 사용
  
  unit_tests:
    path_instructions:
      - path: "src/**/*.ts"
        instructions: |
          TypeScript 클래스에 대한 단위 테스트 생성 시:
          - Jest 테스트 프레임워크 사용
          - describe/it 구조로 테스트 구성
          - beforeEach/afterEach를 활용한 테스트 설정
          - 정상 케이스와 예외 케이스 모두 포함
          - Mock 객체를 활용한 의존성 격리
          - 비동기 테스트 적절히 처리
          - 한국어 테스트 설명 추가 